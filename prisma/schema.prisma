// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id String @id @default(uuid())

  name        String
  description String
  createdAt   DateTime @default(now())

  Cars Car[]
  @@map("categories")
}

model Specification {
  id String @id @default(uuid())

  name        String
  description String
  createdAt   DateTime @default(now())

  cars Car[]
  @@map("specifications")
}

model User {
  id String @id @default(uuid())

  name           String
  password       String
  email          String   @unique
  driver_license String
  avatar         String?
  isAdmin        Boolean  @default(false)
  createdAt      DateTime @default(now())
  rentals        Rental[]

  @@map("users")
}

model Car {
  id             String          @id @default(uuid())
  name           String
  description    String
  daily_rate     Float
  available      Boolean         @default(true)
  license_plate  String          @unique
  fine_amount    Float
  brand          String
  category       Category        @relation(fields: [category_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  category_id    String
  createdAt      DateTime        @default(now())
  car_images     CarImage[]
  specifications Specification[]
  rentals        Rental[]

  @@map("cars")
}

model CarImage {
  id         String   @id @default(uuid())
  image_name String
  Car        Car      @relation(fields: [car_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  car_id     String
  createdAt  DateTime @default(now())

  @@map("cars_images")
}

model Rental {
  id                   String    @id @default(uuid())
  start_date           DateTime  @default(now())
  end_date             DateTime?
  expected_return_date DateTime
  total                Float?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @default(now())
  User                 User      @relation(fields: [user_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  user_id              String
  Car                  Car       @relation(fields: [car_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  car_id               String

  @@map("rentals")
}
